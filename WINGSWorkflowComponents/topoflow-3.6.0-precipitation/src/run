#!/bin/bash

checkExitCode() {
if [ $? -ne 0 ]; then
    echo "Error"
    exit 1;
fi
}

BASEDIR=`dirname $0`

. $BASEDIR/io.sh 2 0 1 "$@"

set -x

#extract zip rate
CLIMATE_FOLDER="rate"
mkdir $CLIMATE_FOLDER
unzip $INPUTS2 -d $CLIMATE_FOLDER

number_expected=1
number_files=$(ls -1q ${CLIMATE_FOLDER}/*.rts | wc -l)
if [ "$number_files" -neq "$number_expected" ];then
  echo "The zipfile must contains $number_expected file with .rts extension";
  exit 1
fi

RATE_FILE_PATH=$(readlink -f $(ls ${CLIMATE_FOLDER}/*.rts))
RATE_FILE_NAME=$(basename -- ${RATE_FILE_PATH})

#creation of a temp folder to have control on the unzipped folder.
mkdir temp
cp $INPUTS1 temp/input.zip
pushd temp
#unzip input
unzip input.zip

#There may be __MACOS files, filter them
TMP=$(ls -d [A-Za-z]*/)

pushd $TMP
#copy climate file
cp $RATE_FILE_PATH .
#The information about the file is in _path_info
config=$(ls *_path_info.cfg)
folderOut=$(cat $config | grep out_directory | cut -d "|" -f 2 |  tr -d ' ')
folderInput=$(cat $config | grep in_directory | cut -d "|" -f 2 | tr -d ' ')
prefix=$(cat $config | grep case_prefix | cut -d "|" -f 2 | tr -d ' ')
out=$(eval echo $folderOut)
echo $out
echo $folderInput
echo $prefix

#meteorology config file
meteorology_file="${prefix}_meteorology.cfg"

#edit p parameter
line_p_parameter=$(grep -n "P " $meteorology_file | cut -d : -f 1)
sed -i "${line_p_parameter}s/\[case_prefix\]_rain_rates.txt/${RATE_FILE_NAME}/g" $meteorology_file

#edit p_type
line_p_type_parameter=$(grep -n "P_type " $meteorology_file | cut -d : -f 1)
sed -i "${line_p_type_parameter}s/Time_Series/Grid_Sequence/g" $meteorology_file

# Create a folder for the model output with the information in _path_info
mkdir -p $out

#Run Topoflow
python3 -m topoflow --cfg_directory $folderInput --cfg_prefix $prefix
#check exit code
checkExitCode

popd
popd

zip -r outputs.zip $out
mv outputs.zip $OUTPUTS1
